#!/usr/bin/env python
"""
Created on Fri Jun 23 08:46:37 2017

Goal: Convert boost state machine into a dot graph.

@author: gowtham
"""

import os
import re

transition_table_pattern = re.compile(
    ".*struct +transition_table *: *boost::mpl::vector<(.*)> *{")
transition_header_pattern = re.compile("msmf::Row<(.*)")
block_comment_pattern = re.compile("/\*.*?\*/", re.DOTALL)
single_comment_pattern = re.compile("//.*?\n")


def removeComments(string):
    """
    Remove block and single comments from the string and return a copy
    """
    global block_comment_pattern, single_comment_pattern
    # remove all occurance streamed comments (/*COMMENT */) from string
    string = re.sub(block_comment_pattern, "", string)
    # remove all occurance singleline comments (//COMMENT\n ) from string
    string = re.sub(single_comment_pattern, "", string)
    return string


def removeNewLines(string):
    """
    Remove new lines from the string and return a copy
    """
    return string.replace('\n', '')


def generate_dot_files(file_path, out_folder):
    """
    Generate a dot file and a png file
    Parameters
    file_path  - Input state machine header file
    out_folder - Folder to save dot graph and png file
    """
    global transition_table_pattern, transition_header_pattern
    with open(file_path) as f:
        input_text = f.read()
    input_text_cleaned = removeNewLines(removeComments(input_text))
    # %%
    transition_table_out = transition_table_pattern.match(input_text_cleaned)
    if transition_table_out is None:
        raise RuntimeError("Cannot find transition table!")

    transition_table_str = transition_table_out.group(1)
    transitions = transition_table_str.split(">,")
    for i, transition in enumerate(transitions):
        transitions[i] = transition.replace(' ', '')  # Replace spaces

    # %% Write dot output
    file_name_short = os.path.basename(file_path).split('.')[0]
    dot_out = "digraph {0} {{\n".format(file_name_short)
    for transition in transitions:
        match_obj = transition_header_pattern.match(transition)
        states_actions = match_obj.group(1).split(',')
        dot_out += '\t"{0}"->"{2}"[label="{1}"];\n'.format(*states_actions[:3])

    dot_out += '}'
    dot_file = file(os.path.join(out_folder, file_name_short + '.gv'), 'w')
    if dot_file is None:
        print "Cannot Save File. Instead Printing the dot format!"
        print dot_out
    else:
        dot_file.write(dot_out)
        dot_file.close()

    # Generate png file
    os.popen("dot {0}.gv "
             "-Tpng > {0}.png".format(os.path.join(out_folder,
                                                   file_name_short)))

if __name__ == '__main__':
    state_machine_folder = ("${PROJECT_SOURCE_DIR}/include/"
                            "aerial_autonomy/state_machines")
    list_files = os.listdir(state_machine_folder)
    state_machine_files = [state_machine_file for state_machine_file in list_files if state_machine_file.endswith('.h')]
    dot_out_folder = "${PROJECT_SOURCE_DIR}/.dot_output"
    if not os.path.exists(dot_out_folder):
        os.mkdir(dot_out_folder)
    for state_machine_file in state_machine_files:
        if (state_machine_file != 'base_state_machine.h' and
                state_machine_file != 'state_machine_gui_connector.h'):
            state_machine_file_full_path = os.path.join(state_machine_folder,
                                                        state_machine_file)
            generate_dot_files(state_machine_file_full_path, dot_out_folder)
